{"title": "Machine Learning is Fun!. The world\u2019s easiest introduction to\u2026 | by Adam Geitgey | Medium", "content": "Adam Geitgey Follow -- 263 Listen Share Update: This article is part of a series. Check out the full series: Part 1, Part 2, Part 3, Part 4, Part 5, Part 6, Part 7 and Part 8! You can also read this article in \u65e5\u672c\u8a9e, Portugu\u00eas, Portugu\u00eas (alternate), T\u00fcrk\u00e7e, Fran\u00e7ais, \ud55c\uad6d\uc5b4 , \u0627\u0644\u0639\u064e\u0631\u064e\u0628\u0650\u064a\u064e\u0651\u0629\u200e\u200e, Espa\u00f1ol (M\u00e9xico), Espa\u00f1ol (Espa\u00f1a), Polski, Italiano, \u666e\u901a\u8bdd, \u0420\u0443\u0441\u0441\u043a\u0438\u0439, \ud55c\uad6d\uc5b4 , Ti\u1ebfng Vi\u1ec7t or \u0641\u0627\u0631\u0633\u06cc. Giant update: I\u2019ve written a new book based on these articles! It not only expands and updates all my articles, but it has tons of brand new content and lots of hands-on coding projects. Check it out now! Have you heard people talking about machine learning but only have a fuzzy idea of what that means? Are you tired of nodding your way through conversations with co-workers? Let\u2019s change that! This guide is for anyone who is curious about machine learning but has no idea where to start. I imagine there are a lot of people who tried reading the wikipedia article, got frustrated and gave up wishing someone would just give them a high-level explanation. That\u2019s what this is. The goal is be accessible to anyone \u2014 which means that there\u2019s a lot of generalizations. But who cares? If this gets anyone more interested in ML, then mission accomplished. Machine learning is the idea that there are generic algorithms that can tell you something interesting about a set of data without you having to write any custom code specific to the problem. Instead of writing code, you feed data to the generic algorithm and it builds its own logic based on the data. For example, one kind of algorithm is a classification algorithm. It can put data into different groups. The same classification algorithm used to recognize handwritten numbers could also be used to classify emails into spam and not-spam without changing a line of code. It\u2019s the same algorithm but it\u2019s fed different training data so it comes up with different classification logic. \u201cMachine learning\u201d is an umbrella term covering lots of these kinds of generic algorithms. You can think of machine learning algorithms as falling into one of two main categories \u2014 supervised learning and unsupervised learning. The difference is simple, but really important. Let\u2019s say you are a real estate agent. Your business is growing, so you hire a bunch of new trainee agents to help you out. But there\u2019s a problem \u2014 you can glance at a house and have a pretty good idea of what a house is worth, but your trainees don\u2019t have your experience so they don\u2019t know how to price their houses. To help your trainees (and maybe free yourself up for a vacation), you decide to write a little app that can estimate the value of a house in your area based on it\u2019s size, neighborhood, etc, and what similar houses have sold for. So you write down every time someone sells a house in your city for 3 months. For each house, you write down a bunch of details \u2014 number of bedrooms, size in square feet, neighborhood, etc. But most importantly, you write down the final sale price: Using that training data, we want to create a program that can estimate how much any other house in your area is worth: This is called supervised learning. You knew how much each house sold for, so in other words, you knew the answer to the problem and could work backwards from there to figure out the logic. To build your app, you feed your training data about each house into your machine learning algorithm. The algorithm is trying to figure out what kind of math needs to be done to make the numbers work out. This kind of like having the answer key to a math test with all the arithmetic symbols erased: From this, can you figure out what kind of math problems were on the test? You know you are supposed to \u201cdo something\u201d with the numbers on the left to get each answer on the right. In supervised learning, you are letting the computer work out that relationship for you. And once you know what math was required to solve this specific set of problems, you could answer to any other problem of the same type! Let\u2019s go back to our original example with the real estate agent. What if you didn\u2019t know the sale price for each house? Even if all you know is the size, location, etc of each house, it turns out you can still do some really cool stuff. This is called unsupervised learning. This is kind of like someone giving you a list of numbers on a sheet of paper and saying \u201cI don\u2019t really know what these numbers mean but maybe you can figure out if there is a pattern or grouping or something \u2014 good luck!\u201d So what could do with this data? For starters, you could have an algorithm that automatically identified different market segments in your data. Maybe you\u2019d find out that home buyers in the neighborhood near the local college really like small houses with lots of bedrooms, but home buyers in the suburbs prefer 3-bedroom houses with lots of square footage. Knowing about these different kinds of customers could help direct your marketing efforts. Another cool thing you could do is automatically identify any outlier houses that were way different than everything else. Maybe those outlier houses are giant mansions and you can focus your best sales people on those areas because they have bigger commissions. Supervised learning is what we\u2019ll focus on for the rest of this post, but that\u2019s not because unsupervised learning is any less useful or interesting. In fact, unsupervised learning is becoming increasingly important as the algorithms get better because it can be used without having to label the data with the correct answer. Side note: There are lots of other types of machine learning algorithms. But this is a pretty good place to start. As a human, your brain can approach most any situation and learn how to deal with that situation without any explicit instructions. If you sell houses for a long time, you will instinctively have a \u201cfeel\u201d for the right price for a house, the best way to market that house, the kind of client who would be interested, etc. The goal of Strong AI research is to be able to replicate this ability with computers. But current machine learning algorithms aren\u2019t that good yet \u2014 they only work when focused a very specific, limited problem. Maybe a better definition for \u201clearning\u201d in this case is \u201cfiguring out an equation to solve a specific problem based on some example data\u201d. Unfortunately \u201cMachine Figuring out an equation to solve a specific problem based on some example data\u201d isn\u2019t really a great name. So we ended up with \u201cMachine Learning\u201d instead. Of course if you are reading this 50 years in the future and we\u2019ve figured out the algorithm for Strong AI, then this whole post will all seem a little quaint. Maybe stop reading and go tell your robot servant to go make you a sandwich, future human. So, how would you write the program to estimate the value of a house like in our example above? Think about it for a second before you read further. If you didn\u2019t know anything about machine learning, you\u2019d probably try to write out some basic rules for estimating the price of a house like this: If you fiddle with this for hours and hours, you might end up with something that sort of works. But your program will never be perfect and it will be hard to maintain as prices change. Wouldn\u2019t it be better if the computer could just figure out how to implement this function for you? Who cares what exactly the function does as long is it returns the correct number: One way to think about this problem is that the price is a delicious stew and the ingredients are the number of bedrooms, the square footage and the neighborhood. If you could just figure out how much each ingredient impacts the final price, maybe there\u2019s an exact ratio of ingredients to stir in to make the final price. That would reduce your original function (with all those crazy if\u2019s and else\u2019s) down to something really simple like this: Notice the magic numbers in bold \u2014 .841231951398213, 1231.1231231, 2.3242341421, and 201.23432095. These are our weights. If we could just figure out the perfect weights to use that work for every house, our function could predict house prices! A dumb way to figure out the best weights would be something like this: Start with each weight set to 1.0: Run every house you know about through your function and see how far off the function is at guessing the correct price for each house: For example, if the first house really sold for $250,000, but your function guessed it sold for $178,000, you are off by $72,000 for that single house. Now add up the squared amount you are off for each house you have in your data set. Let\u2019s say that you had 500 home sales in your data set and the square of how much your function was off for each house was a grand total of $86,123,373. That\u2019s how \u201cwrong\u201d your function currently is. Now, take that sum total and divide it by 500 to get an average of how far off you are for each house. Call this average error amount the cost of your function. If you could get this cost to be zero by playing with the weights, your function would be perfect. It would mean that in every case, your function perfectly guessed the price of the house based on the input data. So that\u2019s our goal \u2014 get this cost to be as low as possible by trying different weights. Repeat Step 2 over and over with every single possible combination of weights. Whichever combination of weights makes the cost closest to zero is what you use. When you find the weights that work, you\u2019ve solved the problem! That\u2019s pretty simple, right? Well think about what you just did. You took some data, you fed it through three generic, really simple steps, and you ended up with a function that can guess the price of any house in your area. Watch out, Zillow! But here\u2019s a few more facts that will blow your mind: Pretty crazy, right? Ok, of course you can\u2019t just try every combination of all possible weights to find the combo that works the best. That would literally take forever since you\u2019d never run out of numbers to try. To avoid that, mathematicians have figured out lots of clever ways to quickly find good values for those weights without having to try very many. Here\u2019s one way: First, write a simple equation that represents Step #2 above: Now let\u2019s re-write exactly the same equation, but using a bunch of machine learning math jargon (that you can ignore for now): This equation represents how wrong our price estimating function is for the weights we currently have set. If we graph this cost equation for all possible values of our weights for number_of_bedrooms and sqft, we\u2019d get a graph that might look something like this: In this graph, the lowest point in blue is where our cost is the lowest \u2014 thus our function is the least wrong. The highest points are where we are most wrong. So if we can find the weights that get us to the lowest point on this graph, we\u2019ll have our answer! So we just need to adjust our weights so we are \u201cwalking down hill\u201d on this graph towards the lowest point. If we keep making small adjustments to our weights that are always moving towards the lowest point, we\u2019ll eventually get there without having to try too many different weights. If you remember anything from Calculus, you might remember that if you take the derivative of a function, it tells you the slope of the function\u2019s tangent at any point. In other words, it tells us which way is downhill for any given point on our graph. We can use that knowledge to walk downhill. So if we calculate a partial derivative of our cost function with respect to each of our weights, then we can subtract that value from each weight. That will walk us one step closer to the bottom of the hill. Keep doing that and eventually we\u2019ll reach the bottom of the hill and have the best possible values for our weights. (If that didn\u2019t make sense, don\u2019t worry and keep reading). That\u2019s a high level summary of one way to find the best weights for your function called batch gradient descent. Don\u2019t be afraid to dig deeper if you are interested on learning the details. When you use a machine learning library to solve a real problem, all of this will be done for you. But it\u2019s still useful to have a good idea of what is happening. The three-step algorithm I described is called multivariate linear regression. You are estimating the equation for a line that fits through all of your house data points. Then you are using that equation to guess the sales price of houses you\u2019ve never seen before based where that house would appear on your line. It\u2019s a really powerful idea and you can solve \u201creal\u201d problems with it. But while the approach I showed you might work in simple cases, it won\u2019t work in all cases. One reason is because house prices aren\u2019t always simple enough to follow a continuous line. But luckily there are lots of ways to handle that. There are plenty of other machine learning algorithms that can handle non-linear data (like neural networks or SVMs with kernels). There are also ways to use linear regression more cleverly that allow for more complicated lines to be fit. In all cases, the same basic idea of needing to find the best weights still applies. Also, I ignored the idea of overfitting. It\u2019s easy to come up with a set of weights that always works perfectly for predicting the prices of the houses in your original data set but never actually works for any new houses that weren\u2019t in your original data set. But there are ways to deal with this (like regularization and using a cross-validation data set). Learning how to deal with this issue is a key part of learning how to apply machine learning successfully. In other words, while the basic concept is pretty simple, it takes some skill and experience to apply machine learning and get useful results. But it\u2019s a skill that any developer can learn! Once you start seeing how easily machine learning techniques can be applied to problems that seem really hard (like handwriting recognition), you start to get the feeling that you could use machine learning to solve any problem and get an answer as long as you have enough data. Just feed in the data and watch the computer magically figure out the equation that fits the data! But it\u2019s important to remember that machine learning only works if the problem is actually solvable with the data that you have. For example, if you build a model that predicts home prices based on the type of potted plants in each house, it\u2019s never going to work. There just isn\u2019t any kind of relationship between the potted plants in each house and the home\u2019s sale price. So no matter how hard it tries, the computer can never deduce a relationship between the two. So remember, if a human expert couldn\u2019t use the data to solve the problem manually, a computer probably won\u2019t be able to either. Instead, focus on problems where a human could solve the problem, but where it would be great if a computer could solve it much more quickly. In my mind, the biggest problem with machine learning right now is that it mostly lives in the world of academia and commercial research groups. There isn\u2019t a lot of easy to understand material out there for people who would like to get a broad understanding without actually becoming experts. But it\u2019s getting a little better every day. If you want to try out what you\u2019ve learned in this article, I made a course that walks you through every step of this article, including writing all the code. Give it a try! If you want to go deeper, Andrew Ng\u2019s free Machine Learning class on Coursera is pretty amazing as a next step. I highly recommend it. It should be accessible to anyone who has a Comp. Sci. degree and who remembers a very minimal amount of math. Also, you can play around with tons of machine learning algorithms by downloading and installing SciKit-Learn. It\u2019s a python framework that has \u201cblack box\u201d versions of all the standard algorithms. If you liked this article, please consider signing up for my Machine Learning is Fun! Newsletter: Also, please check out the full-length course version of this article. It covers everything in this article in more detail, including writing the actual code in Python. You can get a free 30-day trial to watch the course if you sign up with this link. You can also follow me on Twitter at @ageitgey, email me directly or find me on linkedin. I\u2019d love to hear from you if I can help you or your team with machine learning. Now continue on to Machine Learning is Fun Part 2! -- -- 263 Interested in computers and machine learning. Likes to write about it. Adam Geitgey -- 26 Adam Geitgey -- 195 Adam Geitgey -- 62 Adam Geitgey -- 46 The PyCoach in Artificial Corner -- 331 Matt Chapman in Towards Data Science -- 44 Alexander Nguyen in Level Up Coding -- 109 Matt Chapman in Towards Data Science -- 18 Albers Uzila in Level Up Coding -- 14 Alex Mathers -- 204 Help Status Writers Blog Careers Privacy Terms About Text to speech", "url": "https://medium.com/@ageitgey/machine-learning-is-fun-80ea3ec3c471", "threshold": 0.9336515155888865}