{"title": "Why an Engineering Manager Should Not Review Code | by Emily Dresner | May, 2023 | Better Programming", "content": "Sign up Sign In Sign up Sign In Emily Dresner Follow Better Programming -- 16 Listen Share When discussing team organization, I am often asked: \u201cWhy don\u2019t you have the tech lead manage the team?\u201d My response is to hiss like a vampire exposed to holy water. When the follow-up question is: \u201cGiven you want managers on your teams, can the manager still perform code reviews?\u201d I burst into flames. This question comes up all the time. But, let\u2019s think about this question (and my response) a little deeper. Like everything in technology, the answer depends on the situation. Here I attempt to answer the perennial question of \u201cWhy should the TL not lead the team and why should an EM with a team of sufficient size not review code?\u201d  We consider three aspects when answering this question: role definition, team communication complexity, and team size. Let\u2019s unpack my reasoning with helpful graphics. Warning: very light math ahead. First, let\u2019s tackle role definition. Engineering manager and technical lead are two different roles with different skill sets. Someone might be good at one role but not the other (and vice versa). For example, the best programmer on the team is not always the best person to organize all the stuff. However, the team needs both roles to operate optimally. So let\u2019s compare and contrast the roles. This table is why, when an engineer asks to become a manager, I start with a round of \u201cAre you sure are you really sure are you really really sure\u201d questions \u2014 because these are very different roles. This table reflects a partnership between the Technical Lead and the Engineering Manager \u2014 a division of labor between the organizational and communications labor and the hand\u2019s on technical deep thinking. The roles are equals in level and scope across the team, but they perform different activities to support the team\u2019s success. For the manager-lead partnership to work, they need to build trust between themselves. However, this manager/lead distinction doesn\u2019t need to exist until the team has at least 4 people. Below that team size, lines blur. After a team size >= 4, the roles split, and engineering manager should focus on the team and invest in a trust partnership with the technical lead. Let\u2019s see why that size >= 4 is an inflection point. Second, let\u2019s talk about communications. A manager builds a well-working team on solid communication fundamentals. As we add members to the team, communication paths on a team multiply. We intuitively think team communication complexity grows in O(n) as we add people to the team, but here, the Mythical Man Month is 100% on point. Communications complexity on a team grows (n * (n-1))/2) as new people join the team \u2014or O(n\u00b2) quadratic time. Once we\u2019ve built a team of 5 people (6 total, you + 5 engineers) and add a Product Manager and a Data Scientist, the team\u2019s manager must keep 26 ((8*7)/2) team interconnected communications pathways flowing unblocked so the team can execute. Toss in a few partner teams and engage with marketing, sales, and customer service \u2014 managing the team suddenly becomes a day job. All these communication interconnections represent an investment in time. The manager is the spider in a web of complicated communications, including: Simply managing the meetings around the team becomes complex as the team grows. The negative side of team growth is called the diseconomies of scale \u2014 the more scale added to the system, the more rigid the system becomes and the higher the complexity overhead. This complexity is why standups grind to a halt the more people in the meeting. And the team cannot scale infinitely \u2014 adding infinite people to the team will cause the team to implode. At communication interconnections equal to or greater than Dunbar\u2019s number, the manager can\u2019t manage the communication complexity themselves anymore. The threshold is about 17 different people (136 connections) before the manager has to start prioritizing relationships, breaking the team up into two, or delegating further. The explosion of complexity doesn\u2019t explain why the manager shouldn\u2019t code but does describe why the manager\u2019s calendar turns into that \u201cclassic manager\u2019s calendar\u201d at a particular team size, and time becomes a premium. Let\u2019s plot this out and see what is going on visually. Third, we\u2019re going to talk about communications to team size. We\u2019re all engineers here. If we can do anything, it\u2019s plot stuff. We plot the complexity of interconnected communications and team size to see when the manager should pull themselves out of the technology and focus on the communications overhead required for a well-functioning team. (We include the manager in the counts, so these counts are manager + engineers.) At 1\u20133 team members, the communications interconnections are manageable by the group. It\u2019s still small and light. And, at this size, the team leader can perform the role of a Tech Lead Manager (TLM) \u2014 a leader of a small technical team who can still write code and perform technical functions while maintaining many aspects of the manager role: growing engineers, conducting performance reviews, managing the overhead of collaboration with nearby teams, etc. The communications overhead has not yet become overwhelming, and it is possible to wear both hats. The laws of quadratics bites after 4, when there are 6 paths to keep reconciled. 6 doesn\u2019t feel like much overhead, but start thinking through growth, performance, prioritization, and alignment for 4 people and it takes just enough time investment that technical output begins to wane and something must give \u2014 either the output or the fidelity of the communications \u2014 if one person performs both roles. Engineers stop growing. Code stops shipping. Team becomes confused over the most important things. 4 is the magic number when the TLM must make a choice between Technical Lead or an Engineering Manager, but not both. Once we\u2019re to 5 team members, TLM-ing is right out. What happens if no one steps up and takes on the communications role for the team? More often than not, the team collapses into thrash and stops moving forward on their priorities. The team and their stakeholders are too confused. Someone has to establish clarity and process to allow engineers to do what they do best: make awesome things. That role is a full-time job. Interconnected communications complexity is also why large teams naturally break down into sub-teams of 1\u20133 people to focus on a project. At team size 1\u20133, communication overhead is manageable, and technical work gets done. But, once adding the 4th person, we\u2019ve entered the world of the team size curve\u2026 It would seem that the TLM role is the ideal one that allows a leader to perform some people management and technical work and encompasses the best of both worlds. Moreover, for small companies, converting a technical lead to a TLM is a convenient hack for building a team quickly. But TLM is not a long-term position because, ultimately, the roles of Technical Lead and Engineering Manager are different. As a result, TLM is a dead-end: performing two roles at once (badly) without being able to drive the scope (technical or teams) of someone dedicated to one or the other. Ultimately, the TLM will need to pick one lane or the other to invest 100% of their time or become stagnant as they cannot grow scope. Finally, pulling these tracks together, we\u2019ve establishing two facts: At a team size of >= 4, an engineering manager should focus on their core role \u2014 managing the communications within and outside the team, focusing on engineer growth (also communications), and understanding the team\u2019s priorities (yet again communications). And at team size of >= 4, the technical lead should focus on architecture, technical choices, and the team\u2019s technical work. Divide and conquer is how the team succeeds. Unpacking how we get to the end: And thus, why an engineering manager with a team of sufficient size should not review code. Trust, delegation, and communication are the core of the engineering manager\u2019s role, and that\u2019s what it\u2019s all about. -- -- 16 Better Programming I write about Engineering People Leadership | AI/ML | Cloud Computing | Startups | Games Emily Dresner in Better Programming -- 12 Timothy Mugayi in Better Programming -- 91 Vinita in Better Programming -- 81 Emily Dresner in Better Programming -- 5 Franziska Hauck - tech (people) {code} -- 4 Tobias Charles -- 27 Ted Bauer -- 10 Fiona Renate -- 40 Andrew Courter in Level Up Coding -- 8 Scott H. Young -- 32 Help Status Writers Blog Careers Privacy Terms About Text to speech", "url": "https://betterprogramming.pub/why-an-engineering-manager-should-not-review-code-46f87c08db66?source=home---------4---------------------3901f1f8_742d_4f4c_99a6_eeaf1fc46509-------7", "threshold": 0.999998648011569}